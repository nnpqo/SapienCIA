// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A student chatbot assistance AI agent.
 *
 * - studentChatbotAssistance - A function that handles the student chatbot assistance process.
 * - StudentChatbotAssistanceInput - The input type for the studentChatbotAssistance function.
 * - StudentChatbotAssistanceOutput - The return type for the studentChatbotAssistance function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const StudentChatbotAssistanceInputSchema = z.object({
  question: z.string().describe('The question the student is asking about the course material.'),
  courseMaterial: z.string().describe('The relevant course material for the student question.'),
});
export type StudentChatbotAssistanceInput = z.infer<typeof StudentChatbotAssistanceInputSchema>;

const StudentChatbotAssistanceOutputSchema = z.object({
  answer: z.string().describe('The chatbot answer providing guidance and hints to the student.'),
});
export type StudentChatbotAssistanceOutput = z.infer<typeof StudentChatbotAssistanceOutputSchema>;

export async function studentChatbotAssistance(input: StudentChatbotAssistanceInput): Promise<StudentChatbotAssistanceOutput> {
  return studentChatbotAssistanceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'studentChatbotAssistancePrompt',
  input: {schema: StudentChatbotAssistanceInputSchema},
  output: {schema: StudentChatbotAssistanceOutputSchema},
  prompt: `You are a helpful chatbot assistant for students.

You will provide guidance and hints to the student, avoiding direct answers.

Course Material: {{{courseMaterial}}}

Question: {{{question}}}

Answer:`,
});

const studentChatbotAssistanceFlow = ai.defineFlow(
  {
    name: 'studentChatbotAssistanceFlow',
    inputSchema: StudentChatbotAssistanceInputSchema,
    outputSchema: StudentChatbotAssistanceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
